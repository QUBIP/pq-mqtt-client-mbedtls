diff --git a/library/ecp_curves_new.c b/../../../../mbedtls_ed25519/tf-psa-crypto/drivers/builtin/src/ecp_curves_new.c
index 035b23a..7af751c 100644
--- a/library/ecp_curves_new.c
+++ b/../../../../mbedtls_ed25519/tf-psa-crypto/drivers/builtin/src/ecp_curves_new.c
@@ -26,8 +26,6 @@
 
 #include <string.h>
 
-#if !defined(MBEDTLS_ECP_ALT)
-
 #define ECP_MPI_INIT(_p, _n) { .p = (mbedtls_mpi_uint *) (_p), .s = 1, .n = (_n) }
 
 #define ECP_MPI_INIT_ARRAY(x)   \
@@ -4493,7 +4491,7 @@ static const mbedtls_ecp_point brainpoolP512r1_T[32] = {
 
 
 #if defined(ECP_LOAD_GROUP) || defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED) || \
-    defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
+    defined(MBEDTLS_ECP_DP_CURVE448_ENABLED) || defined(MBEDTLS_ECP_DP_ED25519_ENABLED)
 /*
  * Create an MPI from embedded constants
  * (assumes len is an exact multiple of sizeof(mbedtls_mpi_uint) and
@@ -4590,7 +4588,7 @@ int mbedtls_ecp_mod_p521_raw(mbedtls_mpi_uint *N_p, size_t N_n);
 #endif /* MBEDTLS_ECP_NIST_OPTIM */
 
 /* Additional forward declarations */
-#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
+#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED) || defined(MBEDTLS_ECP_DP_ED25519_ENABLED)
 static int ecp_mod_p255(mbedtls_mpi *);
 MBEDTLS_STATIC_TESTABLE
 int mbedtls_ecp_mod_p255_raw(mbedtls_mpi_uint *X, size_t X_limbs);
@@ -4638,9 +4636,8 @@ int mbedtls_ecp_mod_p256k1_raw(mbedtls_mpi_uint *X, size_t X_limbs);
                                          )
 #endif /* ECP_LOAD_GROUP */
 
-#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
+#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED) || defined(MBEDTLS_ECP_DP_ED25519_ENABLED)
 /* Constants used by ecp_use_curve25519() */
-static const mbedtls_mpi_sint curve25519_a24 = 0x01DB42;
 
 /* P = 2^255 - 19 */
 static const mbedtls_mpi_uint curve25519_p[] = {
@@ -4658,6 +4655,9 @@ static const mbedtls_mpi_uint curve25519_n[] = {
     MBEDTLS_BYTES_TO_T_UINT_8(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10)
 };
 
+#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
+static const mbedtls_mpi_sint curve25519_a24 = 0x01DB42;
+
 /*
  * Specialized function for creating the Curve25519 group
  */
@@ -4691,6 +4691,7 @@ cleanup:
     return ret;
 }
 #endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */
+#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED ||  MBEDTLS_ECP_DP_ED25519_ENABLED */
 
 #if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
 /* Constants used by ecp_use_curve448() */
@@ -4753,6 +4754,68 @@ cleanup:
 }
 #endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */
 
+#if defined(MBEDTLS_ECP_DP_ED25519_ENABLED)
+/* Constants used by ecp_use_ed25519() */
+static const unsigned char ed25519_b[] = {
+    0x52, 0x03, 0x6C, 0xEE, 0x2B, 0x6F, 0xFE, 0x73,
+    0x8C, 0xC7, 0x40, 0x79, 0x77, 0x79, 0xE8, 0x98,
+    0x00, 0x70, 0x0A, 0x4D, 0x41, 0x41, 0xD8, 0xAB,
+    0x75, 0xEB, 0x4D, 0xCA, 0x13, 0x59, 0x78, 0xA3,
+};
+static const unsigned char ed25519_g_x[] = {
+    0x21, 0x69, 0x36, 0xD3, 0xCD, 0x6E, 0x53, 0xFE,
+    0xC0, 0xA4, 0xE2, 0x31, 0xFD, 0xD6, 0xDC, 0x5C,
+    0x69, 0x2C, 0xC7, 0x60, 0x95, 0x25, 0xA7, 0xB2,
+    0xC9, 0x56, 0x2D, 0x60, 0x8F, 0x25, 0xD5, 0x1A,
+};
+static const unsigned char ed25519_g_y[] = {
+    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x58,
+};
+
+/*
+ * Specialized function for creating the Ed25519 group
+ */
+static int ecp_use_ed25519(mbedtls_ecp_group *grp)
+{
+    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
+
+    /* P = 2^255 - 19 */
+    ecp_mpi_load(&grp->P, curve25519_p, sizeof(curve25519_p));
+
+    grp->pbits = mbedtls_mpi_bitlen(&grp->P);
+
+    ecp_mpi_load(&grp->N, curve25519_n, sizeof(curve25519_n));
+
+    /* Actually, the required msb for private keys */
+    grp->nbits = 254;
+
+    /* A = -1 */
+    MBEDTLS_MPI_CHK(mbedtls_mpi_sub_int(&grp->A, &grp->P, 1));
+
+    /* B = -121665/121666 (actually d of edwards25519) */
+    MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(&grp->B,
+                                            ed25519_b, sizeof(ed25519_b)));
+
+    /* (X(P),Y(P)) of edwards25519 in RFC7748. Also set Z so that
+     * projective coordinates can be used. */
+    MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(&grp->G.X,
+                                            ed25519_g_x, sizeof(ed25519_g_x)));
+    MBEDTLS_MPI_CHK(mbedtls_mpi_read_binary(&grp->G.Y,
+                                            ed25519_g_y, sizeof(ed25519_g_y)));
+    MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&grp->G.Z, 1));
+
+cleanup:
+    if (ret != 0) {
+        mbedtls_ecp_group_free(grp);
+    }
+
+    return ret;
+}
+#endif /* MBEDTLS_ECP_DP_ED25519_ENABLED */
+
 /*
  * Set a group using well-known domain parameters
  */
@@ -4840,6 +4903,12 @@ int mbedtls_ecp_group_load(mbedtls_ecp_group *grp, mbedtls_ecp_group_id id)
             return ecp_use_curve448(grp);
 #endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */
 
+#if defined(MBEDTLS_ECP_DP_ED25519_ENABLED)
+        case MBEDTLS_ECP_DP_ED25519:
+            grp->modp = ecp_mod_p255;
+            return ecp_use_ed25519(grp);
+#endif /* MBEDTLS_ECP_DP_ED25519_ENABLED */
+
         default:
             grp->id = MBEDTLS_ECP_DP_NONE;
             return MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
@@ -5395,7 +5464,7 @@ int mbedtls_ecp_mod_p521_raw(mbedtls_mpi_uint *X, size_t X_limbs)
 
 #endif /* MBEDTLS_ECP_NIST_OPTIM */
 
-#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
+#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED) || defined(MBEDTLS_ECP_DP_ED25519_ENABLED)
 
 /* Size of p255 in terms of mbedtls_mpi_uint */
 #define P255_WIDTH      (255 / 8 / sizeof(mbedtls_mpi_uint) + 1)
@@ -5459,7 +5528,7 @@ int mbedtls_ecp_mod_p255_raw(mbedtls_mpi_uint *X, size_t X_Limbs)
     mbedtls_free(carry);
     return 0;
 }
-#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */
+#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED || MBEDTLS_ECP_DP_ED25519_ENABLED */
 
 #if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
 
@@ -6031,6 +6100,5 @@ mbedtls_ecp_variant mbedtls_ecp_get_variant(void)
 
 #endif /* MBEDTLS_TEST_HOOKS */
 
-#endif /* !MBEDTLS_ECP_ALT */
 #endif /* MBEDTLS_ECP_LIGHT */
 #endif /* MBEDTLS_ECP_WITH_MPI_UINT */
